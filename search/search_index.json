{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Toolkit","text":""},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>API Reference</li> </ul>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>toolkit     * toolkit._func     * toolkit._iter     * toolkit._serialization     * toolkit._text     * toolkit.abc     * toolkit.array         * toolkit.array.array_like         * toolkit.array.jax         * toolkit.array.numpy             * toolkit.array.numpy._utils         * toolkit.array.python         * toolkit.array.torch     * toolkit.environ     * toolkit.exp     * toolkit.logging         * toolkit.logging.once     * toolkit.typing     * toolkit.validation</li> </ul>"},{"location":"api/toolkit/","title":"toolkit","text":"<p>Modules:</p> <ul> <li> <code>abc</code>           \u2013            </li> <li> <code>array</code>           \u2013            </li> <li> <code>environ</code>           \u2013            </li> <li> <code>exp</code>           \u2013            </li> <li> <code>logging</code>           \u2013            </li> <li> <code>typing</code>           \u2013            </li> <li> <code>validation</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>BaseConfig</code>           \u2013            </li> <li> <code>Experiment</code>           \u2013            </li> <li> <code>Timer</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>deserialize</code>             \u2013              </li> <li> <code>flatten</code>             \u2013              </li> <li> <code>get_running_experiment</code>             \u2013              </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>is_subsequence</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> <li> <code>load_pydantic</code>             \u2013              </li> <li> <code>log_once</code>             \u2013              </li> <li> <code>main</code>             \u2013              </li> <li> <code>merge_mapping</code>             \u2013              <p>Updates the original dict with the new data. Similar to <code>dict.update()</code>, but works with nested dicts.</p> </li> <li> <code>save_pydantic</code>             \u2013              </li> <li> <code>serialize</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>strip_comments</code>             \u2013              </li> <li> <code>timer</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>critical_once</code>           \u2013            </li> <li> <code>debug_once</code>           \u2013            </li> <li> <code>error_once</code>           \u2013            </li> <li> <code>info_once</code>           \u2013            </li> <li> <code>success_once</code>           \u2013            </li> <li> <code>trace_once</code>           \u2013            </li> <li> <code>warning_once</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/#toolkit.critical_once","title":"critical_once  <code>module-attribute</code>","text":"<pre><code>critical_once = partial(log_once, level='CRITICAL')\n</code></pre>"},{"location":"api/toolkit/#toolkit.debug_once","title":"debug_once  <code>module-attribute</code>","text":"<pre><code>debug_once = partial(log_once, level='DEBUG')\n</code></pre>"},{"location":"api/toolkit/#toolkit.error_once","title":"error_once  <code>module-attribute</code>","text":"<pre><code>error_once = partial(log_once, level='ERROR')\n</code></pre>"},{"location":"api/toolkit/#toolkit.info_once","title":"info_once  <code>module-attribute</code>","text":"<pre><code>info_once = partial(log_once, level='INFO')\n</code></pre>"},{"location":"api/toolkit/#toolkit.success_once","title":"success_once  <code>module-attribute</code>","text":"<pre><code>success_once = partial(log_once, level='SUCCESS')\n</code></pre>"},{"location":"api/toolkit/#toolkit.trace_once","title":"trace_once  <code>module-attribute</code>","text":"<pre><code>trace_once = partial(log_once, level='TRACE')\n</code></pre>"},{"location":"api/toolkit/#toolkit.warning_once","title":"warning_once  <code>module-attribute</code>","text":"<pre><code>warning_once = partial(log_once, level='WARNING')\n</code></pre>"},{"location":"api/toolkit/#toolkit.BaseConfig","title":"BaseConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Methods:</p> <ul> <li> <code>settings_customise_sources</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul> Source code in <code>src/toolkit/exp/_config.py</code> <pre><code>class BaseConfig(ps.BaseSettings):\n    model_config = ps.SettingsConfigDict(cli_parse_args=True, yaml_file=\"params.yaml\")\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[ps.BaseSettings],\n        init_settings: ps.PydanticBaseSettingsSource,\n        env_settings: ps.PydanticBaseSettingsSource,\n        dotenv_settings: ps.PydanticBaseSettingsSource,\n        file_secret_settings: ps.PydanticBaseSettingsSource,\n    ) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n            ps.YamlConfigSettingsSource(settings_cls),\n        )\n</code></pre>"},{"location":"api/toolkit/#toolkit.BaseConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(cli_parse_args=True, yaml_file='params.yaml')\n</code></pre>"},{"location":"api/toolkit/#toolkit.BaseConfig.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(settings_cls: type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> Source code in <code>src/toolkit/exp/_config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[ps.BaseSettings],\n    init_settings: ps.PydanticBaseSettingsSource,\n    env_settings: ps.PydanticBaseSettingsSource,\n    dotenv_settings: ps.PydanticBaseSettingsSource,\n    file_secret_settings: ps.PydanticBaseSettingsSource,\n) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        file_secret_settings,\n        ps.YamlConfigSettingsSource(settings_cls),\n    )\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment","title":"Experiment","text":"<p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              </li> <li> <code>get_parameter</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>exp_dir</code>               (<code>Path</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>project_dir</code>               (<code>Path</code>)           \u2013            </li> <li> <code>project_name</code>               (<code>str</code>)           \u2013            </li> </ul> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>class Experiment:\n    _exp: comet.BaseExperiment\n\n    def __init__(self, exp: comet.BaseExperiment | None = None) -&gt; None:\n        self._exp = exp or comet.get_running_experiment() or unittest.mock.Mock()\n\n    @property\n    def project_name(self) -&gt; str:\n        return self._exp.project_name or \"general\"\n\n    @property\n    def name(self) -&gt; str:\n        return self._exp.get_name()\n\n    def get_parameter(self, name: str) -&gt; Any:\n        return self._exp.get_parameter(name)\n\n    def log_parameter(self, name: str, value: Any) -&gt; None:\n        self._exp.log_parameter(name, value)\n\n    def log_parameters(self, parameters: dict[str, Any]) -&gt; None:\n        self._exp.log_parameters(parameters)\n\n    def log_asset(self, path: tp.StrPath, name: str | None = None) -&gt; None:\n        path: Path = Path(path)\n        if tk.environ.get_bool(\"EXP_LOG_ASSET_TO_COMET\", default=False):\n            self._exp.log_asset(path, name)\n        if name is None:\n            try:\n                name = str(path.absolute().relative_to(Path.cwd()))\n            except ValueError:\n                name = path.name\n        target_path: Path = self.exp_dir / name\n        target_path.parent.mkdir(parents=True, exist_ok=True)\n        shutil.copy2(path, target_path)\n\n    @property\n    def exp_dir(self) -&gt; Path:\n        return self.project_dir / self.name\n\n    @property\n    def project_dir(self) -&gt; Path:\n        return Path(\n            tk.environ.get_str(\"EXP_PROJECT_DIR\")\n            or Path.home() / \"exp\" / self.project_name\n        )\n\n    def log_other(self, key: Any, value: Any) -&gt; None:\n        self._exp.log_other(key, value)\n\n    def log_others(self, dictionary: Mapping[str, Any]) -&gt; None:\n        self._exp.log_others(dictionary)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.exp_dir","title":"exp_dir  <code>property</code>","text":"<pre><code>exp_dir: Path\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.project_dir","title":"project_dir  <code>property</code>","text":"<pre><code>project_dir: Path\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.project_name","title":"project_name  <code>property</code>","text":"<pre><code>project_name: str\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.__init__","title":"__init__","text":"<pre><code>__init__(exp: BaseExperiment | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def __init__(self, exp: comet.BaseExperiment | None = None) -&gt; None:\n    self._exp = exp or comet.get_running_experiment() or unittest.mock.Mock()\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.get_parameter","title":"get_parameter","text":"<pre><code>get_parameter(name: str) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def get_parameter(self, name: str) -&gt; Any:\n    return self._exp.get_parameter(name)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.log_asset","title":"log_asset","text":"<pre><code>log_asset(path: StrPath, name: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_asset(self, path: tp.StrPath, name: str | None = None) -&gt; None:\n    path: Path = Path(path)\n    if tk.environ.get_bool(\"EXP_LOG_ASSET_TO_COMET\", default=False):\n        self._exp.log_asset(path, name)\n    if name is None:\n        try:\n            name = str(path.absolute().relative_to(Path.cwd()))\n        except ValueError:\n            name = path.name\n    target_path: Path = self.exp_dir / name\n    target_path.parent.mkdir(parents=True, exist_ok=True)\n    shutil.copy2(path, target_path)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_other(self, key: Any, value: Any) -&gt; None:\n    self._exp.log_other(key, value)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.log_others","title":"log_others","text":"<pre><code>log_others(dictionary: Mapping[str, Any]) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_others(self, dictionary: Mapping[str, Any]) -&gt; None:\n    self._exp.log_others(dictionary)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(name: str, value: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_parameter(self, name: str, value: Any) -&gt; None:\n    self._exp.log_parameter(name, value)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Experiment.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(parameters: dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_parameters(self, parameters: dict[str, Any]) -&gt; None:\n    self._exp.log_parameters(parameters)\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer","title":"Timer","text":"<p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              </li> <li> <code>__enter__</code>             \u2013              </li> <li> <code>__exit__</code>             \u2013              </li> <li> <code>__init__</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>stop</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>depth</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>elapsed</code>               (<code>float</code>)           \u2013            </li> <li> <code>level</code>               (<code>int | str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>class Timer:\n    _end: float\n    _start: float\n    depth: int | None = None\n    level: int | str\n    name: str | None\n\n    def __init__(\n        self,\n        name: str | None = None,\n        *,\n        depth: int | None = None,\n        level: int | str = \"DEBUG\",\n    ) -&gt; None:\n        self.name = name\n        self.depth = depth\n        self.level = level\n\n    def __call__(self, fn: Callable[_P, _T]) -&gt; Callable[_P, _T]:\n        if self.name is None:\n            self.name = fn.__name__ + \"()\"\n        if self.depth is None:\n            self.depth = 3\n\n        @functools.wraps(fn)\n        def wrapped(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\n            with self:\n                result: _T = fn(*args, **kwargs)\n            return result\n\n        return wrapped\n\n    def __enter__(self) -&gt; None:\n        self.start()\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_value: BaseException | None,\n        traceback: types.TracebackType | None,\n    ) -&gt; None:\n        self.stop()\n\n    @property\n    def elapsed(self) -&gt; float:\n        return self._end - self._start\n\n    def start(self) -&gt; None:\n        self._start = time.perf_counter()\n\n    def stop(self) -&gt; None:\n        self._end = time.perf_counter()\n        logger.opt(depth=self.depth or 2).log(\n            self.level, \"{} executed in {} sec.\", self.name or \"Block\", self.elapsed\n        )\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.depth","title":"depth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depth: int | None = depth\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.elapsed","title":"elapsed  <code>property</code>","text":"<pre><code>elapsed: float\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: int | str = level\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str | None = name\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.__call__","title":"__call__","text":"<pre><code>__call__(fn: Callable[_P, _T]) -&gt; Callable[_P, _T]\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __call__(self, fn: Callable[_P, _T]) -&gt; Callable[_P, _T]:\n    if self.name is None:\n        self.name = fn.__name__ + \"()\"\n    if self.depth is None:\n        self.depth = 3\n\n    @functools.wraps(fn)\n    def wrapped(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\n        with self:\n            result: _T = fn(*args, **kwargs)\n        return result\n\n    return wrapped\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __enter__(self) -&gt; None:\n    self.start()\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __exit__(\n    self,\n    exc_type: type[BaseException] | None,\n    exc_value: BaseException | None,\n    traceback: types.TracebackType | None,\n) -&gt; None:\n    self.stop()\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.__init__","title":"__init__","text":"<pre><code>__init__(name: str | None = None, *, depth: int | None = None, level: int | str = 'DEBUG') -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    *,\n    depth: int | None = None,\n    level: int | str = \"DEBUG\",\n) -&gt; None:\n    self.name = name\n    self.depth = depth\n    self.level = level\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def start(self) -&gt; None:\n    self._start = time.perf_counter()\n</code></pre>"},{"location":"api/toolkit/#toolkit.Timer.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def stop(self) -&gt; None:\n    self._end = time.perf_counter()\n    logger.opt(depth=self.depth or 2).log(\n        self.level, \"{} executed in {} sec.\", self.name or \"Block\", self.elapsed\n    )\n</code></pre>"},{"location":"api/toolkit/#toolkit.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(obj: Mapping[str, ArrayLike] | None) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, tp.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: tk.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/toolkit/#toolkit.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if tk.is_numpy(obj):\n        return obj\n    if tk.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/toolkit/#toolkit.deserialize","title":"deserialize","text":"<pre><code>deserialize(fpath: StrPath, *, ext: str | None = None) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/_serialization/_main.py</code> <pre><code>def deserialize(fpath: tp.StrPath, *, ext: str | None = None) -&gt; Any:\n    fpath: Path = Path(fpath)\n    if ext is None:\n        ext = fpath.suffix\n    if ext not in _READERS:\n        msg: str = f\"Unsupported file extension: {ext}\"\n        raise ValueError(msg)\n    reader = _READERS[ext]\n    return reader(fpath)\n</code></pre>"},{"location":"api/toolkit/#toolkit.flatten","title":"flatten","text":"<pre><code>flatten(iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable, base_type: tuple[type, ...] = (str, bytes)) -&gt; Iterable[_T]\n</code></pre> Source code in <code>src/toolkit/_iter/_sequence.py</code> <pre><code>def flatten(\n    iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable,\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]:\n    if not tp.is_iterable(iterable, base_type):\n        yield iterable  # pyright: ignore [reportReturnType]\n        return\n\n    for item in iterable:\n        if tp.is_iterable(item, base_type):\n            yield from flatten(item)\n        else:\n            yield item\n</code></pre>"},{"location":"api/toolkit/#toolkit.get_running_experiment","title":"get_running_experiment","text":"<pre><code>get_running_experiment() -&gt; Experiment\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def get_running_experiment() -&gt; Experiment:\n    return Experiment(comet.get_running_experiment())\n</code></pre>"},{"location":"api/toolkit/#toolkit.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/#toolkit.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/toolkit/array/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return tp.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/toolkit/#toolkit.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return tp.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/toolkit/#toolkit.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/_iter/_sequence.py</code> <pre><code>def is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool:\n    i: int = 0\n    j: int = 0\n    while i &lt; len(a) and j &lt; len(b):\n        if a[i] == b[j]:\n            i += 1\n        j += 1\n    return i == len(a)\n</code></pre>"},{"location":"api/toolkit/#toolkit.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/toolkit/array/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return tp.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/toolkit/#toolkit.load_pydantic","title":"load_pydantic","text":"<pre><code>load_pydantic(fpath: StrPath, cls: type[_C], *, ext: str | None = None) -&gt; _C\n</code></pre> Source code in <code>src/toolkit/_serialization/_pydantic.py</code> <pre><code>def load_pydantic(fpath: tp.StrPath, cls: type[_C], *, ext: str | None = None) -&gt; _C:\n    data: Any = _ser.deserialize(fpath, ext=ext)\n    return cls.model_validate(data)\n</code></pre>"},{"location":"api/toolkit/#toolkit.log_once","title":"log_once  <code>cached</code>","text":"<pre><code>log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/once.py</code> <pre><code>@functools.cache\ndef log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None:\n    logger.opt(depth=depth).log(level, message, *args, **kwargs)\n</code></pre>"},{"location":"api/toolkit/#toolkit.main","title":"main","text":"<pre><code>main(*, config: dict[str, Any] | None = None, exp_name: str | None = None, log_file: StrPath | None = 'exp.log', log_level: int | str = NOTSET, tags: list[str] | None = None) -&gt; Callable[[Callable[[_C], _T]], Callable[[_C], _T]]\n</code></pre> Source code in <code>src/toolkit/exp/_main.py</code> <pre><code>def main(\n    *,\n    config: dict[str, Any] | None = None,\n    exp_name: str | None = None,\n    log_file: tp.StrPath | None = \"exp.log\",\n    log_level: int | str = logging.NOTSET,\n    tags: list[str] | None = None,\n) -&gt; Callable[[Callable[[_C], _T]], Callable[[_C], _T]]:\n    def decorator(fn: Callable[[_C], _T]) -&gt; Callable[[_C], _T]:\n        def wrapped(cfg: _C) -&gt; _T:\n            tk.logging.init(level=log_level, fpath=log_file)\n            exp: tk.Experiment = tk.start(name=exp_name, tags=tags)\n            exp.log_parameters(cfg.model_dump())\n            exp.log_other(\"entrypoint\", _path_relative_to_git_root())\n            result: _T = fn(cfg)\n            if log_file:\n                exp.log_asset(log_file)\n            return result\n\n        if fn.__module__ == \"__main__\":\n            cls: type[_C] = get_type_hints(fn)[\"cfg\"]\n            cfg: _C = cls(**(config or {}))\n            wrapped(cfg)\n        return wrapped\n\n    return decorator\n</code></pre>"},{"location":"api/toolkit/#toolkit.merge_mapping","title":"merge_mapping","text":"<pre><code>merge_mapping(origin: Mapping, update: Mapping) -&gt; dict\n</code></pre> <p>Updates the original dict with the new data. Similar to <code>dict.update()</code>, but works with nested dicts.</p> References <ol> <li>[ConfZ/confz/loaders/loader.py:L10-L28)(https://github.com/Zuehlke/ConfZ/blob/6c99cc2a2938e231590dceeef66749ccf2eb6b4c/confz/loaders/loader.py#L10-L28)</li> </ol> Source code in <code>src/toolkit/_iter/_mapping.py</code> <pre><code>def merge_mapping(origin: Mapping, update: Mapping) -&gt; dict:\n    \"\"\"Updates the original dict with the new data. Similar to `dict.update()`, but works with nested dicts.\n\n    References:\n        1. [ConfZ/confz/loaders/loader.py:L10-L28)(https://github.com/Zuehlke/ConfZ/blob/6c99cc2a2938e231590dceeef66749ccf2eb6b4c/confz/loaders/loader.py#L10-L28)\n    \"\"\"\n    original: dict = dict(origin)\n    for key, value in update.items():\n        if isinstance(value, Mapping) and key in original:\n            if not isinstance(original[key], Mapping):\n                msg: str = (\n                    \"Config variables contradict each other: \"\n                    f\"Key {key:!r} is both a value and a nested dict.\"\n                )\n                raise ValueError(msg)\n            original[key] = merge_mapping(original[key], value)\n        else:\n            original[key] = value\n    return original\n</code></pre>"},{"location":"api/toolkit/#toolkit.save_pydantic","title":"save_pydantic","text":"<pre><code>save_pydantic(fpath: StrPath, data: BaseModel, *, ext: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_pydantic.py</code> <pre><code>def save_pydantic(\n    fpath: tp.StrPath, data: pydantic.BaseModel, *, ext: str | None = None\n) -&gt; None:\n    _ser.serialize(fpath, data.model_dump(), ext=ext)\n</code></pre>"},{"location":"api/toolkit/#toolkit.serialize","title":"serialize","text":"<pre><code>serialize(fpath: StrPath, data: Any, *, ext: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_main.py</code> <pre><code>def serialize(fpath: tp.StrPath, data: Any, *, ext: str | None = None) -&gt; None:\n    fpath: Path = Path(fpath)\n    if ext is None:\n        ext = fpath.suffix\n    if ext not in _WRITERS:\n        msg: str = f\"Unsupported file extension: {ext}\"\n        raise ValueError(msg)\n    writer = _WRITERS[ext]\n    fpath.parent.mkdir(parents=True, exist_ok=True)\n    writer(fpath, data)\n</code></pre>"},{"location":"api/toolkit/#toolkit.start","title":"start","text":"<pre><code>start(*, name: str | None = None, tags: list[str] | None = None) -&gt; Experiment\n</code></pre> Source code in <code>src/toolkit/exp/_start.py</code> <pre><code>def start(*, name: str | None = None, tags: list[str] | None = None) -&gt; tk.Experiment:\n    exp_key: str = get_key()\n    exp_name: str = get_name(name)\n    if tk.environ.get_bool(\"EXP_AUTO_COMMIT\", default=True):\n        auto_commit(exp_name, exp_key)\n    exp: comet.BaseExperiment = comet.start(\n        experiment_key=exp_key,\n        experiment_config=comet.ExperimentConfig(name=exp_name, tags=tags),\n    )\n    return tk.Experiment(exp)\n</code></pre>"},{"location":"api/toolkit/#toolkit.strip_comments","title":"strip_comments","text":"<pre><code>strip_comments(text: str, comments: str = '#') -&gt; Iterable[str]\n</code></pre> Source code in <code>src/toolkit/_text/_strip_comments.py</code> <pre><code>def strip_comments(text: str, comments: str = \"#\") -&gt; Iterable[str]:\n    for line in text.strip().splitlines():\n        stripped: str = line.split(comments, 1)[0].strip()\n        if stripped:\n            yield stripped\n</code></pre>"},{"location":"api/toolkit/#toolkit.timer","title":"timer","text":"<pre><code>timer(name: str | None = None, *, depth: int | None = None, level: int | str = 'DEBUG') -&gt; Timer\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def timer(\n    name: str | None = None,\n    *,\n    depth: int | None = None,\n    level: int | str = \"DEBUG\",\n) -&gt; Timer:\n    return Timer(name=name, depth=depth, level=level)\n</code></pre>"},{"location":"api/toolkit/_func/","title":"toolkit._func","text":"<p>Functions:</p> <ul> <li> <code>kwargs_to_positional</code>             \u2013              <p>Convert **kwargs arguments to positional.</p> </li> </ul>"},{"location":"api/toolkit/_func/#toolkit._func.kwargs_to_positional","title":"kwargs_to_positional","text":"<pre><code>kwargs_to_positional(func: Callable[_P, _T]) -&gt; Callable[_P, _T]\n</code></pre> <p>Convert **kwargs arguments to positional.</p> Reference <ol> <li>https://stackoverflow.com/a/49836730/18410348</li> </ol> Source code in <code>src/toolkit/_func/_kwargs.py</code> <pre><code>def kwargs_to_positional(func: Callable[_P, _T]) -&gt; Callable[_P, _T]:\n    \"\"\"Convert **kwargs arguments to positional.\n\n    Reference:\n        1. &lt;https://stackoverflow.com/a/49836730/18410348&gt;\n    \"\"\"\n    sig: inspect.Signature = inspect.signature(func)\n    if any(v.kind == inspect.Parameter.VAR_KEYWORD for v in sig.parameters.values()):\n        msg: str = f\"Arbitrary keyword arguments are not supported by {__name__}\"\n        raise TypeError(msg)\n\n    @functools.wraps(func)\n    def wrapped_func(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\n        ba: inspect.BoundArguments = sig.bind(*args, **kwargs)\n        ba.apply_defaults()\n        assert len(ba.kwargs) == 0\n        return func(*ba.args, **ba.kwargs)\n\n    return wrapped_func\n</code></pre>"},{"location":"api/toolkit/_iter/","title":"toolkit._iter","text":"<p>Functions:</p> <ul> <li> <code>flatten</code>             \u2013              </li> <li> <code>is_subsequence</code>             \u2013              </li> <li> <code>merge_mapping</code>             \u2013              <p>Updates the original dict with the new data. Similar to <code>dict.update()</code>, but works with nested dicts.</p> </li> </ul>"},{"location":"api/toolkit/_iter/#toolkit._iter.flatten","title":"flatten","text":"<pre><code>flatten(iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable, base_type: tuple[type, ...] = (str, bytes)) -&gt; Iterable[_T]\n</code></pre> Source code in <code>src/toolkit/_iter/_sequence.py</code> <pre><code>def flatten(\n    iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable,\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]:\n    if not tp.is_iterable(iterable, base_type):\n        yield iterable  # pyright: ignore [reportReturnType]\n        return\n\n    for item in iterable:\n        if tp.is_iterable(item, base_type):\n            yield from flatten(item)\n        else:\n            yield item\n</code></pre>"},{"location":"api/toolkit/_iter/#toolkit._iter.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/_iter/_sequence.py</code> <pre><code>def is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool:\n    i: int = 0\n    j: int = 0\n    while i &lt; len(a) and j &lt; len(b):\n        if a[i] == b[j]:\n            i += 1\n        j += 1\n    return i == len(a)\n</code></pre>"},{"location":"api/toolkit/_iter/#toolkit._iter.merge_mapping","title":"merge_mapping","text":"<pre><code>merge_mapping(origin: Mapping, update: Mapping) -&gt; dict\n</code></pre> <p>Updates the original dict with the new data. Similar to <code>dict.update()</code>, but works with nested dicts.</p> References <ol> <li>[ConfZ/confz/loaders/loader.py:L10-L28)(https://github.com/Zuehlke/ConfZ/blob/6c99cc2a2938e231590dceeef66749ccf2eb6b4c/confz/loaders/loader.py#L10-L28)</li> </ol> Source code in <code>src/toolkit/_iter/_mapping.py</code> <pre><code>def merge_mapping(origin: Mapping, update: Mapping) -&gt; dict:\n    \"\"\"Updates the original dict with the new data. Similar to `dict.update()`, but works with nested dicts.\n\n    References:\n        1. [ConfZ/confz/loaders/loader.py:L10-L28)(https://github.com/Zuehlke/ConfZ/blob/6c99cc2a2938e231590dceeef66749ccf2eb6b4c/confz/loaders/loader.py#L10-L28)\n    \"\"\"\n    original: dict = dict(origin)\n    for key, value in update.items():\n        if isinstance(value, Mapping) and key in original:\n            if not isinstance(original[key], Mapping):\n                msg: str = (\n                    \"Config variables contradict each other: \"\n                    f\"Key {key:!r} is both a value and a nested dict.\"\n                )\n                raise ValueError(msg)\n            original[key] = merge_mapping(original[key], value)\n        else:\n            original[key] = value\n    return original\n</code></pre>"},{"location":"api/toolkit/_serialization/","title":"toolkit._serialization","text":"<p>Functions:</p> <ul> <li> <code>deserialize</code>             \u2013              </li> <li> <code>load_json</code>             \u2013              </li> <li> <code>load_pydantic</code>             \u2013              </li> <li> <code>load_toml</code>             \u2013              </li> <li> <code>load_yaml</code>             \u2013              </li> <li> <code>save_json</code>             \u2013              </li> <li> <code>save_pydantic</code>             \u2013              </li> <li> <code>save_toml</code>             \u2013              </li> <li> <code>save_yaml</code>             \u2013              </li> <li> <code>serialize</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.deserialize","title":"deserialize","text":"<pre><code>deserialize(fpath: StrPath, *, ext: str | None = None) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/_serialization/_main.py</code> <pre><code>def deserialize(fpath: tp.StrPath, *, ext: str | None = None) -&gt; Any:\n    fpath: Path = Path(fpath)\n    if ext is None:\n        ext = fpath.suffix\n    if ext not in _READERS:\n        msg: str = f\"Unsupported file extension: {ext}\"\n        raise ValueError(msg)\n    reader = _READERS[ext]\n    return reader(fpath)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.load_json","title":"load_json","text":"<pre><code>load_json(fpath: StrPath) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/_serialization/_json.py</code> <pre><code>def load_json(fpath: tp.StrPath) -&gt; Any:\n    fpath: Path = Path(fpath)\n    with fpath.open() as fp:\n        return json.load(fp)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.load_pydantic","title":"load_pydantic","text":"<pre><code>load_pydantic(fpath: StrPath, cls: type[_C], *, ext: str | None = None) -&gt; _C\n</code></pre> Source code in <code>src/toolkit/_serialization/_pydantic.py</code> <pre><code>def load_pydantic(fpath: tp.StrPath, cls: type[_C], *, ext: str | None = None) -&gt; _C:\n    data: Any = _ser.deserialize(fpath, ext=ext)\n    return cls.model_validate(data)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.load_toml","title":"load_toml","text":"<pre><code>load_toml(fpath: StrPath) -&gt; TOMLDocument\n</code></pre> Source code in <code>src/toolkit/_serialization/_toml.py</code> <pre><code>def load_toml(fpath: tp.StrPath) -&gt; tomlkit.TOMLDocument:\n    fpath: Path = Path(fpath)\n    with fpath.open() as fp:\n        return tomlkit.load(fp)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.load_yaml","title":"load_yaml","text":"<pre><code>load_yaml(fpath: StrPath) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/_serialization/_yaml.py</code> <pre><code>def load_yaml(fpath: tp.StrPath) -&gt; Any:\n    fpath: Path = Path(fpath)\n    yaml = YAML()\n    with fpath.open() as fp:\n        return yaml.load(fp)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.save_json","title":"save_json","text":"<pre><code>save_json(fpath: StrPath, data: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_json.py</code> <pre><code>def save_json(fpath: tp.StrPath, data: Any) -&gt; None:\n    fpath: Path = Path(fpath)\n    with fpath.open(\"w\") as fp:\n        json.dump(data, fp)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.save_pydantic","title":"save_pydantic","text":"<pre><code>save_pydantic(fpath: StrPath, data: BaseModel, *, ext: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_pydantic.py</code> <pre><code>def save_pydantic(\n    fpath: tp.StrPath, data: pydantic.BaseModel, *, ext: str | None = None\n) -&gt; None:\n    _ser.serialize(fpath, data.model_dump(), ext=ext)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.save_toml","title":"save_toml","text":"<pre><code>save_toml(fpath: StrPath, data: Any, *, sort_keys: bool = False) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_toml.py</code> <pre><code>def save_toml(fpath: tp.StrPath, data: Any, *, sort_keys: bool = False) -&gt; None:\n    fpath: Path = Path(fpath)\n    with fpath.open(\"w\") as fp:\n        tomlkit.dump(data, fp, sort_keys=sort_keys)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.save_yaml","title":"save_yaml","text":"<pre><code>save_yaml(fpath: StrPath, data: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_yaml.py</code> <pre><code>def save_yaml(fpath: tp.StrPath, data: Any) -&gt; None:\n    fpath: Path = Path(fpath)\n    yaml = YAML()\n    with fpath.open(\"w\") as fp:\n        yaml.dump(data, fp)\n</code></pre>"},{"location":"api/toolkit/_serialization/#toolkit._serialization.serialize","title":"serialize","text":"<pre><code>serialize(fpath: StrPath, data: Any, *, ext: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/_serialization/_main.py</code> <pre><code>def serialize(fpath: tp.StrPath, data: Any, *, ext: str | None = None) -&gt; None:\n    fpath: Path = Path(fpath)\n    if ext is None:\n        ext = fpath.suffix\n    if ext not in _WRITERS:\n        msg: str = f\"Unsupported file extension: {ext}\"\n        raise ValueError(msg)\n    writer = _WRITERS[ext]\n    fpath.parent.mkdir(parents=True, exist_ok=True)\n    writer(fpath, data)\n</code></pre>"},{"location":"api/toolkit/_text/","title":"toolkit._text","text":"<p>Functions:</p> <ul> <li> <code>strip_comments</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/_text/#toolkit._text.strip_comments","title":"strip_comments","text":"<pre><code>strip_comments(text: str, comments: str = '#') -&gt; Iterable[str]\n</code></pre> Source code in <code>src/toolkit/_text/_strip_comments.py</code> <pre><code>def strip_comments(text: str, comments: str = \"#\") -&gt; Iterable[str]:\n    for line in text.strip().splitlines():\n        stripped: str = line.split(comments, 1)[0].strip()\n        if stripped:\n            yield stripped\n</code></pre>"},{"location":"api/toolkit/abc/","title":"toolkit.abc","text":"<p>Classes:</p> <ul> <li> <code>Mapping</code>           \u2013            </li> <li> <code>Sequence</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/abc/#toolkit.abc.Mapping","title":"Mapping","text":"<p>               Bases: <code>Mapping[_KT, _VT_co]</code></p> <p>Methods:</p> <ul> <li> <code>__getitem__</code>             \u2013              </li> </ul> Source code in <code>src/toolkit/abc/_mapping.py</code> <pre><code>class Mapping(collections.abc.Mapping[_KT, _VT_co]):\n    @overload\n    def __getitem__(self, key: _KT) -&gt; _VT_co: ...\n    @overload\n    def __getitem__(self, key: collections.abc.Iterable[_KT]) -&gt; list[_VT_co]: ...\n    def __getitem__(\n        self, key: _KT | collections.abc.Iterable[_KT]\n    ) -&gt; _VT_co | list[_VT_co]:\n        if tp.is_iterable(key):\n            return [self._get(k) for k in key]\n        return self._get(key)  # pyright: ignore [reportArgumentType]\n\n    @abc.abstractmethod\n    def _get(self, key: _KT) -&gt; _VT_co: ...\n</code></pre>"},{"location":"api/toolkit/abc/#toolkit.abc.Mapping.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: _KT) -&gt; _VT_co\n</code></pre><pre><code>__getitem__(key: Iterable[_KT]) -&gt; list[_VT_co]\n</code></pre> <pre><code>__getitem__(key: _KT | Iterable[_KT]) -&gt; _VT_co | list[_VT_co]\n</code></pre> Source code in <code>src/toolkit/abc/_mapping.py</code> <pre><code>def __getitem__(\n    self, key: _KT | collections.abc.Iterable[_KT]\n) -&gt; _VT_co | list[_VT_co]:\n    if tp.is_iterable(key):\n        return [self._get(k) for k in key]\n    return self._get(key)  # pyright: ignore [reportArgumentType]\n</code></pre>"},{"location":"api/toolkit/abc/#toolkit.abc.Sequence","title":"Sequence","text":"<p>               Bases: <code>Sequence[_T_co]</code></p> <p>Methods:</p> <ul> <li> <code>__getitem__</code>             \u2013              </li> </ul> Source code in <code>src/toolkit/abc/_sequence.py</code> <pre><code>class Sequence(collections.abc.Sequence[_T_co]):\n    @overload\n    def __getitem__(self, index: int) -&gt; _T_co: ...\n    @overload\n    def __getitem__(\n        self, index: slice | collections.abc.Iterable[int]\n    ) -&gt; list[_T_co]: ...\n    def __getitem__(\n        self, index: int | slice | collections.abc.Iterable[int]\n    ) -&gt; _T_co | list[_T_co]:\n        if isinstance(index, int):\n            return self._get(index)\n        if isinstance(index, slice):\n            return [self._get(i) for i in range(*index.indices(len(self)))]\n        if tp.is_iterable(index):\n            return [self._get(i) for i in index]\n        return self._get(index)  # pyright: ignore [reportArgumentType]\n\n    @abc.abstractmethod\n    def _get(self, idx: int) -&gt; _T_co: ...\n</code></pre>"},{"location":"api/toolkit/abc/#toolkit.abc.Sequence.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: int) -&gt; _T_co\n</code></pre><pre><code>__getitem__(index: slice | Iterable[int]) -&gt; list[_T_co]\n</code></pre> <pre><code>__getitem__(index: int | slice | Iterable[int]) -&gt; _T_co | list[_T_co]\n</code></pre> Source code in <code>src/toolkit/abc/_sequence.py</code> <pre><code>def __getitem__(\n    self, index: int | slice | collections.abc.Iterable[int]\n) -&gt; _T_co | list[_T_co]:\n    if isinstance(index, int):\n        return self._get(index)\n    if isinstance(index, slice):\n        return [self._get(i) for i in range(*index.indices(len(self)))]\n    if tp.is_iterable(index):\n        return [self._get(i) for i in index]\n    return self._get(index)  # pyright: ignore [reportArgumentType]\n</code></pre>"},{"location":"api/toolkit/array/","title":"toolkit.array","text":"<p>Modules:</p> <ul> <li> <code>array_like</code>           \u2013            </li> <li> <code>jax</code>           \u2013            </li> <li> <code>numpy</code>           \u2013            </li> <li> <code>python</code>           \u2013            </li> <li> <code>torch</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>as_scalar</code>             \u2013              </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> </ul>"},{"location":"api/toolkit/array/#toolkit.array.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(obj: Mapping[str, ArrayLike] | None) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, tp.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: tk.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if tk.is_numpy(obj):\n        return obj\n    if tk.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(x: Any) -&gt; float\n</code></pre> Source code in <code>src/toolkit/array/python/_cast.py</code> <pre><code>def as_scalar(x: Any) -&gt; float:\n    if tk.is_jax(x):\n        return x.item()\n    if tk.is_numpy(x):\n        return x.item()\n    if tk.is_torch(x):\n        return x.item()\n    return x\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/toolkit/array/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return tp.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return tp.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/toolkit/array/#toolkit.array.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/toolkit/array/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return tp.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/toolkit/array/array_like/","title":"toolkit.array.array_like","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/array_like/#toolkit.array.array_like.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/array/jax/","title":"toolkit.array.jax","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[Array, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[Array, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[Array, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[Array, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[Array, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[Array, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[Array, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[Array, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[Array, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[Array, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[Array, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[Array, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[Array, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[Array, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[Array, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[Array, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[Array, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[Array, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[Array, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[Array, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[Array, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[Array, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[Array, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[Array, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[Array, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[Array, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[Array, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[Array, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[Array, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[Array, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/array/jax/#toolkit.array.jax.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/toolkit/array/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return tp.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/toolkit/array/numpy/","title":"toolkit.array.numpy","text":"<p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_dtype</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>scale</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[ndarray, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[ndarray, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[ndarray, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[ndarray, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[ndarray, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[ndarray, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[ndarray, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[ndarray, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[ndarray, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[ndarray, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[ndarray, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[ndarray, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[ndarray, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[ndarray, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[ndarray, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[ndarray, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[ndarray, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[ndarray, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[ndarray, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[ndarray, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[ndarray, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[ndarray, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[ndarray, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[ndarray, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[ndarray, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[ndarray, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[ndarray, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[ndarray, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[ndarray, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[ndarray, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(obj: Mapping[str, ArrayLike] | None) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, tp.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: tk.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.as_dtype","title":"as_dtype","text":"<pre><code>as_dtype(x: Annotated[NDArray, Numpy], dtype: Annotated[dtype, BeforeValidator(dtype)]) -&gt; NDArray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_dtype.py</code> <pre><code>@tv.validate_call()\ndef as_dtype(\n    x: Annotated[npt.NDArray, tv.Numpy],\n    dtype: Annotated[np.dtype, pydantic.BeforeValidator(np.dtype)],\n) -&gt; npt.NDArray:\n    if np.issubdtype(x.dtype, dtype):\n        return x\n    if np.isdtype(dtype, \"bool\"):\n        if np.ptp(x) &gt; 0:\n            x = tk.array.numpy.scale(x)\n        return x &gt; 0.5\n    if np.isdtype(dtype, \"integral\"):\n        x = np.rint(x)\n    return x.astype(dtype)\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if tk.is_numpy(obj):\n        return obj\n    if tk.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return tp.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/toolkit/array/numpy/#toolkit.array.numpy.scale","title":"scale","text":"<pre><code>scale(x: Annotated[NDArray, Numpy], a: float = 0, b: float = 1) -&gt; NDArray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_scale.py</code> <pre><code>@tv.validate_call()\ndef scale(\n    x: Annotated[npt.NDArray, tv.Numpy], a: float = 0, b: float = 1\n) -&gt; npt.NDArray:\n    x = (x - x.min()) / np.ptp(x)\n    x = x * (b - a) + a\n    return x\n</code></pre>"},{"location":"api/toolkit/array/numpy/_utils/","title":"toolkit.array.numpy._utils","text":"<p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_dtype</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>scale</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/array/numpy/_utils/#toolkit.array.numpy._utils.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(obj: Mapping[str, ArrayLike] | None) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, tp.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: tk.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/toolkit/array/numpy/_utils/#toolkit.array.numpy._utils.as_dtype","title":"as_dtype","text":"<pre><code>as_dtype(x: Annotated[NDArray, Numpy], dtype: Annotated[dtype, BeforeValidator(dtype)]) -&gt; NDArray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_dtype.py</code> <pre><code>@tv.validate_call()\ndef as_dtype(\n    x: Annotated[npt.NDArray, tv.Numpy],\n    dtype: Annotated[np.dtype, pydantic.BeforeValidator(np.dtype)],\n) -&gt; npt.NDArray:\n    if np.issubdtype(x.dtype, dtype):\n        return x\n    if np.isdtype(dtype, \"bool\"):\n        if np.ptp(x) &gt; 0:\n            x = tk.array.numpy.scale(x)\n        return x &gt; 0.5\n    if np.isdtype(dtype, \"integral\"):\n        x = np.rint(x)\n    return x.astype(dtype)\n</code></pre>"},{"location":"api/toolkit/array/numpy/_utils/#toolkit.array.numpy._utils.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if tk.is_numpy(obj):\n        return obj\n    if tk.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/toolkit/array/numpy/_utils/#toolkit.array.numpy._utils.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return tp.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/toolkit/array/numpy/_utils/#toolkit.array.numpy._utils.scale","title":"scale","text":"<pre><code>scale(x: Annotated[NDArray, Numpy], a: float = 0, b: float = 1) -&gt; NDArray\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_scale.py</code> <pre><code>@tv.validate_call()\ndef scale(\n    x: Annotated[npt.NDArray, tv.Numpy], a: float = 0, b: float = 1\n) -&gt; npt.NDArray:\n    x = (x - x.min()) / np.ptp(x)\n    x = x * (b - a) + a\n    return x\n</code></pre>"},{"location":"api/toolkit/array/python/","title":"toolkit.array.python","text":"<p>Functions:</p> <ul> <li> <code>as_scalar</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/array/python/#toolkit.array.python.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(x: Any) -&gt; float\n</code></pre> Source code in <code>src/toolkit/array/python/_cast.py</code> <pre><code>def as_scalar(x: Any) -&gt; float:\n    if tk.is_jax(x):\n        return x.item()\n    if tk.is_numpy(x):\n        return x.item()\n    if tk.is_torch(x):\n        return x.item()\n    return x\n</code></pre>"},{"location":"api/toolkit/array/torch/","title":"toolkit.array.torch","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[Tensor, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[Tensor, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[Tensor, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[Tensor, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[Tensor, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[Tensor, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[Tensor, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[Tensor, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[Tensor, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[Tensor, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[Tensor, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[Tensor, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[Tensor, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[Tensor, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[Tensor, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[Tensor, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[Tensor, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[Tensor, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[Tensor, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[Tensor, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[Tensor, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[Tensor, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[Tensor, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[Tensor, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[Tensor, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[Tensor, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[Tensor, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[Tensor, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[Tensor, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[Tensor, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/array/torch/#toolkit.array.torch.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/toolkit/array/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return tp.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/toolkit/environ/","title":"toolkit.environ","text":"<p>Functions:</p> <ul> <li> <code>get_bool</code>             \u2013              </li> <li> <code>get_str</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/environ/#toolkit.environ.get_bool","title":"get_bool","text":"<pre><code>get_bool(key: str, default: bool = False) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/environ/_get.py</code> <pre><code>def get_bool(key: str, default: bool = False) -&gt; bool:  # noqa: FBT001, FBT002\n    if val := os.getenv(key):\n        return bool_adapter.validate_strings(val)\n    return default\n</code></pre>"},{"location":"api/toolkit/environ/#toolkit.environ.get_str","title":"get_str","text":"<pre><code>get_str(key: str) -&gt; str | None\n</code></pre><pre><code>get_str(key: str, default: str) -&gt; str\n</code></pre> <pre><code>get_str(key: str, default: str | None = None) -&gt; str | None\n</code></pre> Source code in <code>src/toolkit/environ/_get.py</code> <pre><code>def get_str(key: str, default: str | None = None) -&gt; str | None:\n    return os.getenv(key, default)\n</code></pre>"},{"location":"api/toolkit/exp/","title":"toolkit.exp","text":"<p>Classes:</p> <ul> <li> <code>BaseConfig</code>           \u2013            </li> <li> <code>Experiment</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>get_running_experiment</code>             \u2013              </li> <li> <code>main</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> </ul>"},{"location":"api/toolkit/exp/#toolkit.exp.BaseConfig","title":"BaseConfig","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Methods:</p> <ul> <li> <code>settings_customise_sources</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul> Source code in <code>src/toolkit/exp/_config.py</code> <pre><code>class BaseConfig(ps.BaseSettings):\n    model_config = ps.SettingsConfigDict(cli_parse_args=True, yaml_file=\"params.yaml\")\n\n    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: type[ps.BaseSettings],\n        init_settings: ps.PydanticBaseSettingsSource,\n        env_settings: ps.PydanticBaseSettingsSource,\n        dotenv_settings: ps.PydanticBaseSettingsSource,\n        file_secret_settings: ps.PydanticBaseSettingsSource,\n    ) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n        return (\n            init_settings,\n            env_settings,\n            dotenv_settings,\n            file_secret_settings,\n            ps.YamlConfigSettingsSource(settings_cls),\n        )\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.BaseConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(cli_parse_args=True, yaml_file='params.yaml')\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.BaseConfig.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(settings_cls: type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre> Source code in <code>src/toolkit/exp/_config.py</code> <pre><code>@classmethod\ndef settings_customise_sources(\n    cls,\n    settings_cls: type[ps.BaseSettings],\n    init_settings: ps.PydanticBaseSettingsSource,\n    env_settings: ps.PydanticBaseSettingsSource,\n    dotenv_settings: ps.PydanticBaseSettingsSource,\n    file_secret_settings: ps.PydanticBaseSettingsSource,\n) -&gt; tuple[ps.PydanticBaseSettingsSource, ...]:\n    return (\n        init_settings,\n        env_settings,\n        dotenv_settings,\n        file_secret_settings,\n        ps.YamlConfigSettingsSource(settings_cls),\n    )\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment","title":"Experiment","text":"<p>Methods:</p> <ul> <li> <code>__init__</code>             \u2013              </li> <li> <code>get_parameter</code>             \u2013              </li> <li> <code>log_asset</code>             \u2013              </li> <li> <code>log_other</code>             \u2013              </li> <li> <code>log_others</code>             \u2013              </li> <li> <code>log_parameter</code>             \u2013              </li> <li> <code>log_parameters</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>exp_dir</code>               (<code>Path</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>project_dir</code>               (<code>Path</code>)           \u2013            </li> <li> <code>project_name</code>               (<code>str</code>)           \u2013            </li> </ul> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>class Experiment:\n    _exp: comet.BaseExperiment\n\n    def __init__(self, exp: comet.BaseExperiment | None = None) -&gt; None:\n        self._exp = exp or comet.get_running_experiment() or unittest.mock.Mock()\n\n    @property\n    def project_name(self) -&gt; str:\n        return self._exp.project_name or \"general\"\n\n    @property\n    def name(self) -&gt; str:\n        return self._exp.get_name()\n\n    def get_parameter(self, name: str) -&gt; Any:\n        return self._exp.get_parameter(name)\n\n    def log_parameter(self, name: str, value: Any) -&gt; None:\n        self._exp.log_parameter(name, value)\n\n    def log_parameters(self, parameters: dict[str, Any]) -&gt; None:\n        self._exp.log_parameters(parameters)\n\n    def log_asset(self, path: tp.StrPath, name: str | None = None) -&gt; None:\n        path: Path = Path(path)\n        if tk.environ.get_bool(\"EXP_LOG_ASSET_TO_COMET\", default=False):\n            self._exp.log_asset(path, name)\n        if name is None:\n            try:\n                name = str(path.absolute().relative_to(Path.cwd()))\n            except ValueError:\n                name = path.name\n        target_path: Path = self.exp_dir / name\n        target_path.parent.mkdir(parents=True, exist_ok=True)\n        shutil.copy2(path, target_path)\n\n    @property\n    def exp_dir(self) -&gt; Path:\n        return self.project_dir / self.name\n\n    @property\n    def project_dir(self) -&gt; Path:\n        return Path(\n            tk.environ.get_str(\"EXP_PROJECT_DIR\")\n            or Path.home() / \"exp\" / self.project_name\n        )\n\n    def log_other(self, key: Any, value: Any) -&gt; None:\n        self._exp.log_other(key, value)\n\n    def log_others(self, dictionary: Mapping[str, Any]) -&gt; None:\n        self._exp.log_others(dictionary)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.exp_dir","title":"exp_dir  <code>property</code>","text":"<pre><code>exp_dir: Path\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.project_dir","title":"project_dir  <code>property</code>","text":"<pre><code>project_dir: Path\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.project_name","title":"project_name  <code>property</code>","text":"<pre><code>project_name: str\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.__init__","title":"__init__","text":"<pre><code>__init__(exp: BaseExperiment | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def __init__(self, exp: comet.BaseExperiment | None = None) -&gt; None:\n    self._exp = exp or comet.get_running_experiment() or unittest.mock.Mock()\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.get_parameter","title":"get_parameter","text":"<pre><code>get_parameter(name: str) -&gt; Any\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def get_parameter(self, name: str) -&gt; Any:\n    return self._exp.get_parameter(name)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.log_asset","title":"log_asset","text":"<pre><code>log_asset(path: StrPath, name: str | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_asset(self, path: tp.StrPath, name: str | None = None) -&gt; None:\n    path: Path = Path(path)\n    if tk.environ.get_bool(\"EXP_LOG_ASSET_TO_COMET\", default=False):\n        self._exp.log_asset(path, name)\n    if name is None:\n        try:\n            name = str(path.absolute().relative_to(Path.cwd()))\n        except ValueError:\n            name = path.name\n    target_path: Path = self.exp_dir / name\n    target_path.parent.mkdir(parents=True, exist_ok=True)\n    shutil.copy2(path, target_path)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.log_other","title":"log_other","text":"<pre><code>log_other(key: Any, value: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_other(self, key: Any, value: Any) -&gt; None:\n    self._exp.log_other(key, value)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.log_others","title":"log_others","text":"<pre><code>log_others(dictionary: Mapping[str, Any]) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_others(self, dictionary: Mapping[str, Any]) -&gt; None:\n    self._exp.log_others(dictionary)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.log_parameter","title":"log_parameter","text":"<pre><code>log_parameter(name: str, value: Any) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_parameter(self, name: str, value: Any) -&gt; None:\n    self._exp.log_parameter(name, value)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.Experiment.log_parameters","title":"log_parameters","text":"<pre><code>log_parameters(parameters: dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def log_parameters(self, parameters: dict[str, Any]) -&gt; None:\n    self._exp.log_parameters(parameters)\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.get_running_experiment","title":"get_running_experiment","text":"<pre><code>get_running_experiment() -&gt; Experiment\n</code></pre> Source code in <code>src/toolkit/exp/_exp.py</code> <pre><code>def get_running_experiment() -&gt; Experiment:\n    return Experiment(comet.get_running_experiment())\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.main","title":"main","text":"<pre><code>main(*, config: dict[str, Any] | None = None, exp_name: str | None = None, log_file: StrPath | None = 'exp.log', log_level: int | str = NOTSET, tags: list[str] | None = None) -&gt; Callable[[Callable[[_C], _T]], Callable[[_C], _T]]\n</code></pre> Source code in <code>src/toolkit/exp/_main.py</code> <pre><code>def main(\n    *,\n    config: dict[str, Any] | None = None,\n    exp_name: str | None = None,\n    log_file: tp.StrPath | None = \"exp.log\",\n    log_level: int | str = logging.NOTSET,\n    tags: list[str] | None = None,\n) -&gt; Callable[[Callable[[_C], _T]], Callable[[_C], _T]]:\n    def decorator(fn: Callable[[_C], _T]) -&gt; Callable[[_C], _T]:\n        def wrapped(cfg: _C) -&gt; _T:\n            tk.logging.init(level=log_level, fpath=log_file)\n            exp: tk.Experiment = tk.start(name=exp_name, tags=tags)\n            exp.log_parameters(cfg.model_dump())\n            exp.log_other(\"entrypoint\", _path_relative_to_git_root())\n            result: _T = fn(cfg)\n            if log_file:\n                exp.log_asset(log_file)\n            return result\n\n        if fn.__module__ == \"__main__\":\n            cls: type[_C] = get_type_hints(fn)[\"cfg\"]\n            cfg: _C = cls(**(config or {}))\n            wrapped(cfg)\n        return wrapped\n\n    return decorator\n</code></pre>"},{"location":"api/toolkit/exp/#toolkit.exp.start","title":"start","text":"<pre><code>start(*, name: str | None = None, tags: list[str] | None = None) -&gt; Experiment\n</code></pre> Source code in <code>src/toolkit/exp/_start.py</code> <pre><code>def start(*, name: str | None = None, tags: list[str] | None = None) -&gt; tk.Experiment:\n    exp_key: str = get_key()\n    exp_name: str = get_name(name)\n    if tk.environ.get_bool(\"EXP_AUTO_COMMIT\", default=True):\n        auto_commit(exp_name, exp_key)\n    exp: comet.BaseExperiment = comet.start(\n        experiment_key=exp_key,\n        experiment_config=comet.ExperimentConfig(name=exp_name, tags=tags),\n    )\n    return tk.Experiment(exp)\n</code></pre>"},{"location":"api/toolkit/logging/","title":"toolkit.logging","text":"<p>Modules:</p> <ul> <li> <code>once</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Timer</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>init</code>             \u2013              </li> <li> <code>log_once</code>             \u2013              </li> <li> <code>timer</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEFAULT_FILTER</code>               (<code>dict[str | None, str | int | bool]</code>)           \u2013            </li> <li> <code>critical_once</code>           \u2013            </li> <li> <code>debug_once</code>           \u2013            </li> <li> <code>error_once</code>           \u2013            </li> <li> <code>info_once</code>           \u2013            </li> <li> <code>success_once</code>           \u2013            </li> <li> <code>trace_once</code>           \u2013            </li> <li> <code>warning_once</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/logging/#toolkit.logging.DEFAULT_FILTER","title":"DEFAULT_FILTER  <code>module-attribute</code>","text":"<pre><code>DEFAULT_FILTER: dict[str | None, str | int | bool] = {'everett': INFO, 'git.cmd': INFO, 'jax._src': INFO, 'numba.core': INFO, 'urllib3.connectionpool': INFO}\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.critical_once","title":"critical_once  <code>module-attribute</code>","text":"<pre><code>critical_once = partial(log_once, level='CRITICAL')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.debug_once","title":"debug_once  <code>module-attribute</code>","text":"<pre><code>debug_once = partial(log_once, level='DEBUG')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.error_once","title":"error_once  <code>module-attribute</code>","text":"<pre><code>error_once = partial(log_once, level='ERROR')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.info_once","title":"info_once  <code>module-attribute</code>","text":"<pre><code>info_once = partial(log_once, level='INFO')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.success_once","title":"success_once  <code>module-attribute</code>","text":"<pre><code>success_once = partial(log_once, level='SUCCESS')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.trace_once","title":"trace_once  <code>module-attribute</code>","text":"<pre><code>trace_once = partial(log_once, level='TRACE')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.warning_once","title":"warning_once  <code>module-attribute</code>","text":"<pre><code>warning_once = partial(log_once, level='WARNING')\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer","title":"Timer","text":"<p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              </li> <li> <code>__enter__</code>             \u2013              </li> <li> <code>__exit__</code>             \u2013              </li> <li> <code>__init__</code>             \u2013              </li> <li> <code>start</code>             \u2013              </li> <li> <code>stop</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>depth</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>elapsed</code>               (<code>float</code>)           \u2013            </li> <li> <code>level</code>               (<code>int | str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> </ul> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>class Timer:\n    _end: float\n    _start: float\n    depth: int | None = None\n    level: int | str\n    name: str | None\n\n    def __init__(\n        self,\n        name: str | None = None,\n        *,\n        depth: int | None = None,\n        level: int | str = \"DEBUG\",\n    ) -&gt; None:\n        self.name = name\n        self.depth = depth\n        self.level = level\n\n    def __call__(self, fn: Callable[_P, _T]) -&gt; Callable[_P, _T]:\n        if self.name is None:\n            self.name = fn.__name__ + \"()\"\n        if self.depth is None:\n            self.depth = 3\n\n        @functools.wraps(fn)\n        def wrapped(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\n            with self:\n                result: _T = fn(*args, **kwargs)\n            return result\n\n        return wrapped\n\n    def __enter__(self) -&gt; None:\n        self.start()\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_value: BaseException | None,\n        traceback: types.TracebackType | None,\n    ) -&gt; None:\n        self.stop()\n\n    @property\n    def elapsed(self) -&gt; float:\n        return self._end - self._start\n\n    def start(self) -&gt; None:\n        self._start = time.perf_counter()\n\n    def stop(self) -&gt; None:\n        self._end = time.perf_counter()\n        logger.opt(depth=self.depth or 2).log(\n            self.level, \"{} executed in {} sec.\", self.name or \"Block\", self.elapsed\n        )\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.depth","title":"depth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depth: int | None = depth\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.elapsed","title":"elapsed  <code>property</code>","text":"<pre><code>elapsed: float\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: int | str = level\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str | None = name\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.__call__","title":"__call__","text":"<pre><code>__call__(fn: Callable[_P, _T]) -&gt; Callable[_P, _T]\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __call__(self, fn: Callable[_P, _T]) -&gt; Callable[_P, _T]:\n    if self.name is None:\n        self.name = fn.__name__ + \"()\"\n    if self.depth is None:\n        self.depth = 3\n\n    @functools.wraps(fn)\n    def wrapped(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\n        with self:\n            result: _T = fn(*args, **kwargs)\n        return result\n\n    return wrapped\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __enter__(self) -&gt; None:\n    self.start()\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __exit__(\n    self,\n    exc_type: type[BaseException] | None,\n    exc_value: BaseException | None,\n    traceback: types.TracebackType | None,\n) -&gt; None:\n    self.stop()\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.__init__","title":"__init__","text":"<pre><code>__init__(name: str | None = None, *, depth: int | None = None, level: int | str = 'DEBUG') -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def __init__(\n    self,\n    name: str | None = None,\n    *,\n    depth: int | None = None,\n    level: int | str = \"DEBUG\",\n) -&gt; None:\n    self.name = name\n    self.depth = depth\n    self.level = level\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def start(self) -&gt; None:\n    self._start = time.perf_counter()\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.Timer.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def stop(self) -&gt; None:\n    self._end = time.perf_counter()\n    logger.opt(depth=self.depth or 2).log(\n        self.level, \"{} executed in {} sec.\", self.name or \"Block\", self.elapsed\n    )\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.init","title":"init","text":"<pre><code>init(level: str | int = NOTSET, fpath: StrPath | None = None) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/_init.py</code> <pre><code>def init(level: str | int = logging.NOTSET, fpath: tp.StrPath | None = None) -&gt; None:\n    rich.traceback.install(show_locals=True)\n    logger.remove()\n    logger.add(sys.stderr, level=level, filter=DEFAULT_FILTER)\n    if fpath is not None:\n        fpath: Path = Path(fpath)\n        fpath.parent.mkdir(parents=True, exist_ok=True)\n        logger.add(fpath.open(\"w\"), level=level, filter=DEFAULT_FILTER)\n    logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.log_once","title":"log_once  <code>cached</code>","text":"<pre><code>log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/once.py</code> <pre><code>@functools.cache\ndef log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None:\n    logger.opt(depth=depth).log(level, message, *args, **kwargs)\n</code></pre>"},{"location":"api/toolkit/logging/#toolkit.logging.timer","title":"timer","text":"<pre><code>timer(name: str | None = None, *, depth: int | None = None, level: int | str = 'DEBUG') -&gt; Timer\n</code></pre> Source code in <code>src/toolkit/logging/_timer.py</code> <pre><code>def timer(\n    name: str | None = None,\n    *,\n    depth: int | None = None,\n    level: int | str = \"DEBUG\",\n) -&gt; Timer:\n    return Timer(name=name, depth=depth, level=level)\n</code></pre>"},{"location":"api/toolkit/logging/once/","title":"toolkit.logging.once","text":"<p>Functions:</p> <ul> <li> <code>log_once</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>critical_once</code>           \u2013            </li> <li> <code>debug_once</code>           \u2013            </li> <li> <code>error_once</code>           \u2013            </li> <li> <code>info_once</code>           \u2013            </li> <li> <code>success_once</code>           \u2013            </li> <li> <code>trace_once</code>           \u2013            </li> <li> <code>warning_once</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.critical_once","title":"critical_once  <code>module-attribute</code>","text":"<pre><code>critical_once = partial(log_once, level='CRITICAL')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.debug_once","title":"debug_once  <code>module-attribute</code>","text":"<pre><code>debug_once = partial(log_once, level='DEBUG')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.error_once","title":"error_once  <code>module-attribute</code>","text":"<pre><code>error_once = partial(log_once, level='ERROR')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.info_once","title":"info_once  <code>module-attribute</code>","text":"<pre><code>info_once = partial(log_once, level='INFO')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.success_once","title":"success_once  <code>module-attribute</code>","text":"<pre><code>success_once = partial(log_once, level='SUCCESS')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.trace_once","title":"trace_once  <code>module-attribute</code>","text":"<pre><code>trace_once = partial(log_once, level='TRACE')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.warning_once","title":"warning_once  <code>module-attribute</code>","text":"<pre><code>warning_once = partial(log_once, level='WARNING')\n</code></pre>"},{"location":"api/toolkit/logging/once/#toolkit.logging.once.log_once","title":"log_once  <code>cached</code>","text":"<pre><code>log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None\n</code></pre> Source code in <code>src/toolkit/logging/once.py</code> <pre><code>@functools.cache\ndef log_once(level: int | str, message: str, *args, depth: int = 1, **kwargs) -&gt; None:\n    logger.opt(depth=depth).log(level, message, *args, **kwargs)\n</code></pre>"},{"location":"api/toolkit/typing/","title":"toolkit.typing","text":"<p>Functions:</p> <ul> <li> <code>full_name</code>             \u2013              <p>Returns the fully qualified name of the given object.</p> </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_class_named</code>             \u2013              </li> <li> <code>is_class_named_partial</code>             \u2013              </li> <li> <code>is_instance_named</code>             \u2013              </li> <li> <code>is_instance_named_partial</code>             \u2013              </li> <li> <code>is_iterable</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> <li> <code>is_named</code>             \u2013              </li> <li> <code>is_named_partial</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>is_sequence</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>Scalar</code>               (<code>TypeAlias</code>)           \u2013            </li> <li> <code>StrPath</code>               (<code>TypeAlias</code>)           \u2013            </li> </ul>"},{"location":"api/toolkit/typing/#toolkit.typing.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike: TypeAlias = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar: TypeAlias = bool | int | float\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.StrPath","title":"StrPath  <code>module-attribute</code>","text":"<pre><code>StrPath: TypeAlias = str | PathLike[str]\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.full_name","title":"full_name","text":"<pre><code>full_name(obj: Any) -&gt; str\n</code></pre> <p>Returns the fully qualified name of the given object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The object whose fully qualified name is to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The fully qualified name of the object.</p> </li> </ul> Reference <ol> <li>https://stackoverflow.com/a/2020083/18410348</li> </ol> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def full_name(obj: Any) -&gt; str:\n    \"\"\"Returns the fully qualified name of the given object.\n\n    Args:\n        obj: The object whose fully qualified name is to be returned.\n\n    Returns:\n        The fully qualified name of the object.\n\n    Reference:\n        1. &lt;https://stackoverflow.com/a/2020083/18410348&gt;\n    \"\"\"\n    if not isinstance(obj, type):\n        return full_name(type(obj))\n    clazz: type = obj\n    module: str = clazz.__module__\n    if module == \"builtins\":\n        return clazz.__qualname__\n    return clazz.__module__ + \".\" + clazz.__qualname__\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/array/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_class_named","title":"is_class_named","text":"<pre><code>is_class_named(cls: type, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_class_named(cls: type, name: str | Sequence[str]) -&gt; bool:\n    return any((full_name(cls) in tk.flatten(name)) for cls in cls.__mro__)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_class_named_partial","title":"is_class_named_partial","text":"<pre><code>is_class_named_partial(cls: type, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_class_named_partial(cls: type, name: str | Sequence[str]) -&gt; bool:\n    for clazz in cls.__mro__:\n        class_parts: list[str] = full_name(clazz).split(\".\")\n        for n in tk.flatten(name):\n            name_parts: list[str] = n.split(\".\")\n            if tk.is_subsequence(name_parts, class_parts):\n                return True\n    return False\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_instance_named","title":"is_instance_named","text":"<pre><code>is_instance_named(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_instance_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named(type(obj), name)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_instance_named_partial","title":"is_instance_named_partial","text":"<pre><code>is_instance_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_instance_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named_partial(type(obj), name)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_iterable","title":"is_iterable","text":"<pre><code>is_iterable(obj: Any, base_type: tuple[type, ...] = (str, bytes)) -&gt; TypeGuard[Iterable]\n</code></pre> Source code in <code>src/toolkit/typing/_is.py</code> <pre><code>def is_iterable(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Iterable]:\n    return isinstance(obj, Iterable) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/toolkit/array/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return tp.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_named","title":"is_named","text":"<pre><code>is_named(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named(obj, name)\n    return is_instance_named(obj, name)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_named_partial","title":"is_named_partial","text":"<pre><code>is_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/toolkit/typing/_name.py</code> <pre><code>def is_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named_partial(obj, name)\n    return is_instance_named_partial(obj, name)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/toolkit/array/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return tp.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_sequence","title":"is_sequence","text":"<pre><code>is_sequence(obj: Any, base_type: tuple[type, ...] = (str, bytes)) -&gt; TypeGuard[Sequence]\n</code></pre> Source code in <code>src/toolkit/typing/_is.py</code> <pre><code>def is_sequence(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Sequence]:\n    return isinstance(obj, Sequence) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/toolkit/typing/#toolkit.typing.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/toolkit/array/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return tp.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/toolkit/validation/","title":"toolkit.validation","text":"<p>Functions:</p> <ul> <li> <code>validate_call</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>DictOfNumpy</code>           \u2013            </li> <li> <code>Jax</code>           \u2013            </li> <li> <code>Numpy</code>           \u2013            </li> <li> <code>SaveDirPath</code>           \u2013            </li> <li> <code>SaveFilePath</code>           \u2013            </li> <li> <code>Torch</code>           \u2013            </li> </ul>"},{"location":"api/toolkit/validation/#toolkit.validation.DictOfNumpy","title":"DictOfNumpy  <code>module-attribute</code>","text":"<pre><code>DictOfNumpy = BeforeValidator(as_dict_of_numpy)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.Jax","title":"Jax  <code>module-attribute</code>","text":"<pre><code>Jax = BeforeValidator(asarray)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.Numpy","title":"Numpy  <code>module-attribute</code>","text":"<pre><code>Numpy = BeforeValidator(as_numpy)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.SaveDirPath","title":"SaveDirPath  <code>module-attribute</code>","text":"<pre><code>SaveDirPath = AfterValidator(mkdir)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.SaveFilePath","title":"SaveFilePath  <code>module-attribute</code>","text":"<pre><code>SaveFilePath = AfterValidator(parent_mkdir)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.Torch","title":"Torch  <code>module-attribute</code>","text":"<pre><code>Torch = BeforeValidator(as_tensor)\n</code></pre>"},{"location":"api/toolkit/validation/#toolkit.validation.validate_call","title":"validate_call","text":"<pre><code>validate_call(*, config: ConfigDict | None = None, validate_return: bool = True) -&gt; Callable[[_AnyCallableT], _AnyCallableT]\n</code></pre> Source code in <code>src/toolkit/validation/_validate_call.py</code> <pre><code>def validate_call(\n    *, config: pydantic.ConfigDict | None = None, validate_return: bool = True\n) -&gt; Callable[[_AnyCallableT], _AnyCallableT]:\n    if config is None:\n        config = pydantic.ConfigDict(\n            arbitrary_types_allowed=True,\n            validate_default=True,\n            validate_return=validate_return,\n        )\n    return pydantic.validate_call(config=config, validate_return=validate_return)\n</code></pre>"}]}